{
  "manifest": {
    "name": "prosemirror-tables",
    "version": "1.3.4",
    "description": "ProseMirror's rowspan/colspan tables component",
    "type": "module",
    "main": "dist/index.cjs",
    "module": "dist/index.js",
    "style": "style/tables.css",
    "types": "dist/index.d.ts",
    "exports": {
      ".": {
        "import": "./dist/index.js",
        "require": "./dist/index.cjs"
      },
      "./style/tables.css": "./style/tables.css"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/prosemirror/prosemirror-tables.git"
    },
    "maintainers": [
      {
        "name": "Eduard Shvedai",
        "email": "eshvedai@atlassian.com"
      },
      {
        "name": "Huanhuan Huang",
        "email": "hhuang@atlassian.com"
      }
    ],
    "dependencies": {
      "prosemirror-keymap": "^1.1.2",
      "prosemirror-model": "^1.8.1",
      "prosemirror-state": "^1.3.1",
      "prosemirror-transform": "^1.2.1",
      "prosemirror-view": "^1.13.3"
    },
    "devDependencies": {
      "@typescript-eslint/eslint-plugin": "^5.59.11",
      "@typescript-eslint/parser": "^5.59.11",
      "builddocs": "^1.0.7",
      "eslint": "^8.42.0",
      "eslint-plugin-jest": "^26.9.0",
      "ist": "^1.1.7",
      "prettier": "^2.8.8",
      "prosemirror-commands": "^1.5.2",
      "prosemirror-example-setup": "^1.2.2",
      "prosemirror-menu": "^1.2.2",
      "prosemirror-schema-basic": "^1.2.2",
      "prosemirror-test-builder": "^1.1.1",
      "tsup": "^6.7.0",
      "typescript": "^4.9.5",
      "vite": "^4.3.9",
      "vitest": "^0.32.0"
    },
    "scripts": {
      "dev": "vite demo",
      "build_demo": "vite build demo",
      "typecheck": "tsc --noEmit",
      "test": "vitest",
      "build": "tsup",
      "watch": "tsup --watch",
      "build_readme": "builddocs --name tables --format markdown --main src/README.md src/*.js > README.md",
      "format": "prettier --write .",
      "lint": "eslint ./src/ ./test/ && prettier --check ."
    },
    "_registry": "npm",
    "_loc": "/home/erp/.cache/yarn/v6/npm-prosemirror-tables-1.3.4-0b7cc16d49f90c5b834c9f29291c545478ce9ab0-integrity/node_modules/prosemirror-tables/package.json",
    "readmeFilename": "README.md",
    "readme": "# ProseMirror table module\n\nThis module defines a schema extension to support tables with\nrowspan/colspan support, a custom selection class for cell selections\nin such a table, a plugin to manage such selections and enforce\ninvariants on such tables, and a number of commands to work with\ntables.\n\nThe top-level directory contains a `demo.js` and `index.html`, which\ncan be built with `yarn build_demo` to show a simple demo of how the\nmodule can be used.\n\n## [Live Demo](https://prosemirror-tables.netlify.app/)\n\n## Documentation\n\nThe module's main file exports everything you need to work with it.\nThe first thing you'll probably want to do is create a table-enabled\nschema. That's what `tableNodes` is for:\n\n * **`tableNodes`**`(options: Object) → Object`\\\n   This function creates a set of [node\n   specs](http://prosemirror.net/docs/ref/#model.SchemaSpec.nodes) for\n   `table`, `table_row`, and `table_cell` nodes types as used by this\n   module. The result can then be added to the set of nodes when\n   creating a a schema.\n\n    * **`options`**`: Object`\\\n      The following options are understood:\n\n       * **`tableGroup`**`: ?string`\\\n         A group name (something like `\"block\"`) to add to the table\n         node type.\n\n       * **`cellContent`**`: string`\\\n         The content expression for table cells.\n\n       * **`cellAttributes`**`: ?Object`\\\n         Additional attributes to add to cells. Maps attribute names to\n         objects with the following properties:\n\n          * **`default`**`: any`\\\n            The attribute's default value.\n\n          * **`getFromDOM`**`: ?fn(dom.Node) → any`\\\n            A function to read the attribute's value from a DOM node.\n\n          * **`setDOMAttr`**`: ?fn(value: any, attrs: Object)`\\\n            A function to add the attribute's value to an attribute\n            object that's used to render the cell's DOM.\n\n\n * **`tableEditing`**`() → Plugin`\\\n   Creates a [plugin](http://prosemirror.net/docs/ref/#state.Plugin)\n   that, when added to an editor, enables cell-selection, handles\n   cell-based copy/paste, and makes sure tables stay well-formed (each\n   row has the same width, and cells don't overlap).\n\n   You should probably put this plugin near the end of your array of\n   plugins, since it handles mouse and arrow key events in tables\n   rather broadly, and other plugins, like the gap cursor or the\n   column-width dragging plugin, might want to get a turn first to\n   perform more specific behavior.\n\n\n### class CellSelection extends Selection\n\nA [`Selection`](http://prosemirror.net/docs/ref/#state.Selection)\nsubclass that represents a cell selection spanning part of a table.\nWith the plugin enabled, these will be created when the user\nselects across cells, and will be drawn by giving selected cells a\n`selectedCell` CSS class.\n\n * `new `**`CellSelection`**`($anchorCell: ResolvedPos, $headCell: ?ResolvedPos = $anchorCell)`\\\n   A table selection is identified by its anchor and head cells. The\n   positions given to this constructor should point _before_ two\n   cells in the same table. They may be the same, to select a single\n   cell.\n\n * **`$anchorCell`**`: ResolvedPos`\\\n   A resolved position pointing _in front of_ the anchor cell (the one\n   that doesn't move when extending the selection).\n\n * **`$headCell`**`: ResolvedPos`\\\n   A resolved position pointing in front of the head cell (the one\n   moves when extending the selection).\n\n * **`content`**`() → Slice`\\\n   Returns a rectangular slice of table rows containing the selected\n   cells.\n\n * **`isColSelection`**`() → bool`\\\n   True if this selection goes all the way from the top to the\n   bottom of the table.\n\n * **`isRowSelection`**`() → bool`\\\n   True if this selection goes all the way from the left to the\n   right of the table.\n\n * `static `**`colSelection`**`($anchorCell: ResolvedPos, $headCell: ?ResolvedPos = $anchorCell) → CellSelection`\\\n   Returns the smallest column selection that covers the given anchor\n   and head cell.\n\n * `static `**`rowSelection`**`($anchorCell: ResolvedPos, $headCell: ?ResolvedPos = $anchorCell) → CellSelection`\\\n   Returns the smallest row selection that covers the given anchor\n   and head cell.\n\n * `static `**`create`**`(doc: Node, anchorCell: number, headCell: ?number = anchorCell) → CellSelection`\n\n\n### Commands\n\nThe following commands can be used to make table-editing functionality\navailable to users.\n\n * **`addColumnBefore`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Command to add a column before the column with the selection.\n\n\n * **`addColumnAfter`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Command to add a column after the column with the selection.\n\n\n * **`deleteColumn`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Command function that removes the selected columns from a table.\n\n\n * **`addRowBefore`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Add a table row before the selection.\n\n\n * **`addRowAfter`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Add a table row after the selection.\n\n\n * **`deleteRow`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Remove the selected rows from a table.\n\n\n * **`mergeCells`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Merge the selected cells into a single cell. Only available when\n   the selected cells' outline forms a rectangle.\n\n\n * **`splitCell`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Split a selected cell, whose rowpan or colspan is greater than one,\n   into smaller cells. Use the first cell type for the new cells.\n\n\n * **`splitCellWithType`**`(getType: fn({row: number, col: number, node: Node}) → NodeType) → fn(EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Split a selected cell, whose rowpan or colspan is greater than one,\n   into smaller cells with the cell type (th, td) returned by getType function.\n\n\n * **`setCellAttr`**`(name: string, value: any) → fn(EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Returns a command that sets the given attribute to the given value,\n   and is only available when the currently selected cell doesn't\n   already have that attribute set to that value.\n\n\n * **`toggleHeaderRow`**`(EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Toggles whether the selected row contains header cells.\n\n\n * **`toggleHeaderColumn`**`(EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Toggles whether the selected column contains header cells.\n\n\n * **`toggleHeaderCell`**`(EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Toggles whether the selected cells are header cells.\n\n\n * **`toggleHeader`**`(type: string, options: ?{useDeprecatedLogic: bool}) → fn(EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Toggles between row/column header and normal cells (Only applies to first row/column).\n   For deprecated behavior pass `useDeprecatedLogic` in options with true.\n\n\n * **`goToNextCell`**`(direction: number) → fn(EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Returns a command for selecting the next (direction=1) or previous\n   (direction=-1) cell in a table.\n\n\n * **`deleteTable`**`(state: EditorState, dispatch: ?fn(tr: Transaction)) → bool`\\\n   Deletes the table around the selection, if any.\n\n\n### Utilities\n\n * **`fixTables`**`(state: EditorState, oldState: ?EditorState) → ?Transaction`\\\n   Inspect all tables in the given state's document and return a\n   transaction that fixes them, if necessary. If `oldState` was\n   provided, that is assumed to hold a previous, known-good state,\n   which will be used to avoid re-scanning unchanged parts of the\n   document.\n\n\n### class TableMap\n\nA table map describes the structore of a given table. To avoid\nrecomputing them all the time, they are cached per table node. To\nbe able to do that, positions saved in the map are relative to the\nstart of the table, rather than the start of the document.\n\n * **`width`**`: number`\\\n   The width of the table\n\n * **`height`**`: number`\\\n   The table's height\n\n * **`map`**`: [number]`\\\n   A width * height array with the start position of\n   the cell covering that part of the table in each slot\n\n * **`findCell`**`(pos: number) → Rect`\\\n   Find the dimensions of the cell at the given position.\n\n * **`colCount`**`(pos: number) → number`\\\n   Find the left side of the cell at the given position.\n\n * **`nextCell`**`(pos: number, axis: string, dir: number) → ?number`\\\n   Find the next cell in the given direction, starting from the cell\n   at `pos`, if any.\n\n * **`rectBetween`**`(a: number, b: number) → Rect`\\\n   Get the rectangle spanning the two given cells.\n\n * **`cellsInRect`**`(rect: Rect) → [number]`\\\n   Return the position of all cells that have the top left corner in\n   the given rectangle.\n\n * **`positionAt`**`(row: number, col: number, table: Node) → number`\\\n   Return the position at which the cell at the given row and column\n   starts, or would start, if a cell started there.\n\n * `static `**`get`**`(table: Node) → TableMap`\\\n   Find the table map for the given table node.\n\n\n",
    "licenseText": "Copyright (C) 2015-2016 by Marijn Haverbeke <marijnh@gmail.com> and others\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/prosemirror-tables/-/prosemirror-tables-1.3.4.tgz#0b7cc16d49f90c5b834c9f29291c545478ce9ab0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/prosemirror-tables/-/prosemirror-tables-1.3.4.tgz",
    "hash": "0b7cc16d49f90c5b834c9f29291c545478ce9ab0",
    "integrity": "sha512-z6uLSQ1BLC3rgbGwZmpfb+xkdvD7W/UOsURDfognZFYaTtc0gsk7u/t71Yijp2eLflVpffMk6X0u0+u+MMDvIw==",
    "registry": "npm",
    "packageName": "prosemirror-tables",
    "cacheIntegrity": "sha512-z6uLSQ1BLC3rgbGwZmpfb+xkdvD7W/UOsURDfognZFYaTtc0gsk7u/t71Yijp2eLflVpffMk6X0u0+u+MMDvIw== sha1-C3zBbUn5DFuDTJ8pKRxUVHjOmrA="
  },
  "registry": "npm",
  "hash": "0b7cc16d49f90c5b834c9f29291c545478ce9ab0"
}