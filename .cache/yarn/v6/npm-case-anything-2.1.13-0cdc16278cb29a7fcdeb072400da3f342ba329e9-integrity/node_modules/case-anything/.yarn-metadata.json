{
  "manifest": {
    "name": "case-anything",
    "version": "2.1.13",
    "description": "camelCase, kebab-case, PascalCase... a simple integration with nano package size. (SMALL footprint!)",
    "type": "module",
    "sideEffects": false,
    "types": "./dist/index.d.ts",
    "module": "./dist/index.js",
    "main": "./dist/index.js",
    "exports": {
      ".": {
        "require": {
          "types": "./dist/cjs/index.d.cts",
          "default": "./dist/cjs/index.cjs"
        },
        "import": {
          "types": "./dist/index.d.ts",
          "default": "./dist/index.js"
        }
      }
    },
    "files": [
      "dist"
    ],
    "engines": {
      "node": ">=12.13"
    },
    "scripts": {
      "lint": "tsc --noEmit && eslint ./src --ext .ts",
      "test": "vitest run",
      "build": "rollup -c ./rollup.config.js",
      "release": "npm run lint && del dist && npm run build && np"
    },
    "devDependencies": {
      "@typescript-eslint/eslint-plugin": "^5.59.2",
      "@typescript-eslint/parser": "^5.59.2",
      "del-cli": "^5.0.0",
      "eslint": "^8.40.0",
      "eslint-config-prettier": "^8.8.0",
      "eslint-plugin-tree-shaking": "^1.10.0",
      "np": "^7.7.0",
      "prettier": "^2.8.8",
      "rollup": "^3.23.0",
      "rollup-plugin-dts": "^5.3.0",
      "rollup-plugin-esbuild": "^5.0.0",
      "typescript": "^4.9.5",
      "vitest": "^0.31.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mesqueeb/case-anything.git"
    },
    "keywords": [
      "change-case",
      "change-casing",
      "case-change",
      "casing-change",
      "camel-case",
      "pascal-case",
      "kebab-case",
      "snake-case",
      "ada-case",
      "constant-case",
      "train-case",
      "cobol-case",
      "path-case",
      "dot-case",
      "camel",
      "pascal",
      "kebab",
      "snake",
      "constant",
      "path",
      "format-string"
    ],
    "author": {
      "name": "Luca Ban - Mesqueeb"
    },
    "funding": "https://github.com/sponsors/mesqueeb",
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mesqueeb/case-anything/issues"
    },
    "homepage": "https://github.com/mesqueeb/case-anything#readme",
    "np": {
      "yarn": false,
      "branch": "production"
    },
    "eslintConfig": {
      "ignorePatterns": [
        "node_modules",
        "dist",
        "scripts",
        "test"
      ],
      "root": true,
      "parser": "@typescript-eslint/parser",
      "plugins": [
        "@typescript-eslint",
        "tree-shaking"
      ],
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
      ],
      "rules": {
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/ban-ts-ignore": "off",
        "tree-shaking/no-side-effects-in-initialization": "error",
        "@typescript-eslint/ban-ts-comment": "off"
      }
    },
    "_registry": "npm",
    "_loc": "/home/erp/.cache/yarn/v6/npm-case-anything-2.1.13-0cdc16278cb29a7fcdeb072400da3f342ba329e9-integrity/node_modules/case-anything/package.json",
    "readmeFilename": "README.md",
    "readme": "# Case anything 🐫\n\n<a href=\"https://www.npmjs.com/package/case-anything\"><img src=\"https://img.shields.io/npm/v/case-anything.svg\" alt=\"Total Downloads\"></a>\n<a href=\"https://www.npmjs.com/package/case-anything\"><img src=\"https://img.shields.io/npm/dw/case-anything.svg\" alt=\"Latest Stable Version\"></a>\n\n```\nnpm i case-anything\n```\n\n14 case changing functions: camelCase, kebab-case, PascalCase **and more**...<br />\nA simple integration with nano package size. (SMALL footprint!)\n\n## Motivation\n\nI created this package because most other packages that do simple case changing are so big...\n\n<table>\n  <tr>\n    <td>\n      <p>Some features I focused on:</p>\n      <li>small footprint (it's <a href=\"#package-size\">12+ times smaller</a> than the next popular case changing package!!)</li>\n      <li>tree-shakable — only import what you need</li>\n      <li>awesome JSDocs popup documentation on hover</li>\n      <li>fully typed with TypeScript</li>\n      <li>complete coverage with unit testing</li>\n      <li>0 dependencies</li>\n    </td>\n    <td>\n      <p>Case anything is used in...</p>\n      <li>Famous Mac app <a href=\"https://pilotmoon.com/popclip\">Popclip 💊</a></li>\n      <li>State Management Library <a href=\"https://github.com/cycraft/magnetar\">Magnetar 🌟</a></li>\n      <li>Vue Form Generator <a href=\"https://github.com/cycraft/blitzar\">Blitzar ⚡️</a></li>\n      <li><a href=\"https://github.com/apideck-libraries/portman\">Lottie-player ∫</a></li>\n      <li>OpenAPI CLI <a href=\"https://github.com/apideck-libraries/portman\">Portman 👨🏽‍🚀</a></li>\n      <li>and <a href=\"https://github.com/mesqueeb/case-anything/network/dependents\">100s more</a>...</li>\n    </td>\n  </tr>\n</table>\n\n## Usage\n\ncase-anything supports tree-shaking and is side-effect free!\n\n```js\n// just import the functions you need like so:\nimport { camelCase, kebabCase } from 'case-anything'\n```\n\ncase-anything has different behaviour if the string you pass has spaces or not.\n\n- Without spaces it will split and format on every \"part\" it can detect\n- With spaces it will split and format on every \"word\" based on those spaces\n\n### Strings without spaces\n\n| Name                              | Input example                                            | Output example |\n| --------------------------------- | -------------------------------------------------------- | -------------- |\n| 🐪 camelCase                      | `camelCase('$catDog')`                                   | `catDog`       |\n| 🐫 PascalCase<br />UpperCamelCase | `pascalCase('$catDog')`<br />`upperCamelCase('$catDog')` | `CatDog`       |\n| 🥙 kebab-case                     | `kebabCase('$catDog')`                                   | `cat-dog`      |\n| 🐍 snake_case                     | `snakeCase('$catDog')`                                   | `cat_dog`      |\n| 📣 CONSTANT_CASE                  | `constantCase('$catDog')`                                | `CAT_DOG`      |\n| 🚂 Train-Case                     | `trainCase('$catDog')`                                   | `Cat-Dog`      |\n| 🕊 Ada_Case                        | `adaCase('$catDog')`                                     | `Cat_Dog`      |\n| 👔 COBOL-CASE                     | `cobolCase('$catDog')`                                   | `CAT-DOG`      |\n| 📍 Dot.notation                   | `dotNotation('$catDog')`                                 | `cat.Dog`      |\n| 📂 Path/case                      | `pathCase('$catDog')`                                    | `$cat/Dog`     |\n| 🛰 Space case                      | `spaceCase('$catDog')`                                   | `$cat Dog`     |\n| 🏛 Capital Case                    | `capitalCase('$catDog')`                                 | `$Cat Dog`     |\n| 🔡 lower case                     | `lowerCase('$catDog')`                                   | `$cat dog`     |\n| 🔠 UPPER CASE                     | `upperCase('$catDog')`                                   | `$CAT DOG`     |\n\n#### Special Characters\n\nYou can see that most functions by default remove special characters, and some functions keep special characters.\n\n<table>\n  <tr>\n    <th>functions that <i>remove</i> special characters*</th>\n    <th>functions that <i>keep</i> special characters*</th>\n  </tr>\n  <tr>\n    <td>\n      <li>camelCase</li>\n      <li>pascalCase</li>\n      <li>kebabCase</li>\n      <li>snakeCase</li>\n      <li>constantCase</li>\n      <li>trainCase</li>\n      <li>adaCase</li>\n      <li>cobolCase</li>\n      <li>dotNotation</li>\n    </td>\n    <td>\n      <li>pathCase</li>\n      <li>spaceCase</li>\n      <li>capitalCase</li>\n      <li>lowerCase</li>\n      <li>upperCase</li>\n    </td>\n  </tr>\n</table>\n\n\\*You can control wether or not to _keep or remove_ special characters like so:\n\n```js\n// default:\ncamelCase('$catDog') === 'catDog'\n// force keeping special characters:\ncamelCase('$catDog', { keepSpecialCharacters: true }) === '$catDog'\n\n// default:\npathCase('$catDog') === '$cat/Dog'\n// force removing special characters:\npathCase('$catDog', { keepSpecialCharacters: false }) === 'cat/Dog'\n```\n\n#### Case Changing\n\nThese cases _**do not change the casing**_ of the words:\n\n- dotNotation\n- pathCase\n- spaceCase\n\n```js\n// default:\ndotNotation('$catDog') === 'cat.Dog'\n// force lower case:\ndotNotation('$catDog').toLowerCase() === 'cat.dog'\n```\n\n### Strings with spaces\n\nAs soon as there is a space in the target string, it will regard the input as a _sentence_ and only split each part at the spaces.\n\n| Name                              | Input example                                                | Output example |\n| --------------------------------- | ------------------------------------------------------------ | -------------- |\n| 🐪 camelCase                      | `camelCase(\"I'm O.K.!\")`                                     | `imOk`         |\n| 🐫 PascalCase<br />UpperCamelCase | `pascalCase(\"I'm O.K.!\")`<br />`upperCamelCase(\"I'm O.K.!\")` | `ImOk`         |\n| 🥙 kebab-case                     | `kebabCase(\"I'm O.K.!\")`                                     | `im-ok`        |\n| 🐍 snake_case                     | `snakeCase(\"I'm O.K.!\")`                                     | `im_ok`        |\n| 📣 CONSTANT_CASE                  | `constantCase(\"I'm O.K.!\")`                                  | `IM_OK`        |\n| 🚂 Train-Case                     | `trainCase(\"I'm O.K.!\")`                                     | `Im-Ok`        |\n| 🕊 Ada_Case                        | `adaCase(\"I'm O.K.!\")`                                       | `Im_Ok`        |\n| 👔 COBOL-CASE                     | `cobolCase(\"I'm O.K.!\")`                                     | `IM-OK`        |\n| 📍 Dot.notation                   | `dotNotation(\"I'm O.K.!\")`                                   | `Im.OK`        |\n| 📂 Path/case                      | `pathCase(\"I'm O.K.!\")`                                      | `I'm/O.K.!`    |\n| 🛰 Space case                      | `spaceCase(\"I'm O.K.!\")`                                     | `I'm O.K.!`    |\n| 🏛 Capital Case                    | `capitalCase(\"I'm O.K.!\")`                                   | `I'm O.k.!`    |\n| 🔡 lower case                     | `lowerCase(\"I'm O.K.!\")`                                     | `i'm o.k.!`    |\n| 🔠 UPPER CASE                     | `upperCase(\"I'm O.K.!\")`                                     | `I'M O.K.!`    |\n\nAlso note, that multiple sequential spaces are treated as one space.\n\n### Keep only certain special characters\n\nInstead of removing all special characters, you can opt to keep some special characters.\n\nIn the example below we see:\n\n- input: `$cat-dog`\n- desired output: `$CatDog`\n\n```js\npascalCase('$cat-dog', { keepSpecialCharacters: false })\n// CatDog   → not what we want\n\npascalCase('$cat-dog', { keepSpecialCharacters: true })\n// $Cat-Dog → not what we want\n\npascalCase('$cat-dog', { keep: ['$'] })\n// $CatDog  → desired output\n```\n\n### Convert special characters into alphabet\n\nI have extended regular alphabet with the most common _Latin-1 Supplement_ special characters.\n\nThe coolest thing about this library is that it will **\"convert\" special characters into regular alphabet** for the cases used as variable names! 😎\n\n<!-- prettier-ignore-start -->\n```js\n// CONVERTS special characters:\ncamelCase('Çâfé Ågård')    === 'cafeAgard'\npascalCase('Çâfé Ågård')   === 'CafeAgard'\nkebabCase('Çâfé Ågård')    === 'cafe-agard'\nsnakeCase('Çâfé Ågård')    === 'cafe_agard'\nconstantCase('Çâfé Ågård') === 'CAFE_AGARD'\ntrainCase('Çâfé Ågård')    === 'Cafe-Agard'\nadaCase('Çâfé Ågård')      === 'Cafe_Agard'\ncobolCase('Çâfé Ågård')    === 'CAFE-AGARD'\ndotNotation('Çâfé Ågård')  === 'Cafe.Agard'\n\n// DOES NOT convert special characters:\nspaceCase('Çâfé Ågård')    === 'Çâfé Ågård'\npathCase('Çâfé Ågård')     === 'Çâfé/Ågård'\nlowerCase('Çâfé Ågård')    === 'çâfé ågård'\nupperCase('Çâfé Ågård')    === 'ÇÂFÉ ÅGÅRD'\ncapitalCase('Çâfé Ågård')  === 'Çâfé Ågård'\n```\n<!-- prettier-ignore-end -->\n\n## JSDocs\n\nI have made sure there is great documentation available on hover!\n\n![jsdocs preview](.media/jsdocs.gif?raw=true)\n\n## Keyboard shortcuts\n\nWith [Better Touch Tool](https://folivora.ai) you can set up keyboard shortcuts to convert selected text with JavaScript. This repo provides an easy to install preset that has shortcuts for pascal, kebab and camel case! (thanks to [@AndrewKoch](https://github.com/AndrewKoch)) It even supports multi-cursors in VSCode!\n\nHere is an example triggering keyboard shortcuts to convert the selected text to PascalCase; kebab-case; camelCase:\n\n![keyboard shortcuts example](.media/case-anything%20VSCode.gif?raw=true)\n\nYou can download the BTT preset from the source code: [case-anything.bttpreset](case-anything.bttpreset).\n\n## Package size\n\nWe'll compare this package with [blakeembrey/change-case](https://github.com/blakeembrey/change-case), a very famous package on npm.\n\n|              | case-anything | change-case  |\n| ------------ | ------------- | ------------ |\n| camelCase    | 1.1K (572)    | 27.2K (6K)   |\n| pascalCase   | 1.1K (561)    | 27.4K (6.1K) |\n| kebabCase    | 1.1K (541)    | 26.8K (5.9K) |\n| snakeCase    | 1.1K (540)    | 26.8K (5.9K) |\n| constantCase | 1.1K (540)    | 27.2K (6K)   |\n| pathCase     | 1K (530)      | 26.8K (5.9K) |\n\n## Source code\n\nWhat keeps my package small, is that literally just uses a regex to separate \"words\".\n\n```js\n// the source code is similar to:\nexport function splitOnSpecialChars(string: string): any[] {\n  return string.match(/^[a-z]+|[A-Z][a-z]+|[a-z]+|[0-9]+|[A-Z]+(?![a-z])/g)\n}\n```\n\nThe actual regex used is a little bit more comprehensive and can be found [here](https://github.com/mesqueeb/case-anything/blob/production/src/utils.ts#L7).\n\n## Meet the family (more tiny utils with TS support)\n\n- [is-what 🙉](https://github.com/mesqueeb/is-what)\n- [is-where 🙈](https://github.com/mesqueeb/is-where)\n- [merge-anything 🥡](https://github.com/mesqueeb/merge-anything)\n- [check-anything 👁](https://github.com/mesqueeb/check-anything)\n- [remove-anything ✂️](https://github.com/mesqueeb/remove-anything)\n- [getorset-anything 🐊](https://github.com/mesqueeb/getorset-anything)\n- [map-anything 🗺](https://github.com/mesqueeb/map-anything)\n- [filter-anything ⚔️](https://github.com/mesqueeb/filter-anything)\n- [copy-anything 🎭](https://github.com/mesqueeb/copy-anything)\n- [case-anything 🐫](https://github.com/mesqueeb/case-anything)\n- [flatten-anything 🏏](https://github.com/mesqueeb/flatten-anything)\n- [nestify-anything 🧅](https://github.com/mesqueeb/nestify-anything)\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Luca Ban - Mesqueeb\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/case-anything/-/case-anything-2.1.13.tgz#0cdc16278cb29a7fcdeb072400da3f342ba329e9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/case-anything/-/case-anything-2.1.13.tgz",
    "hash": "0cdc16278cb29a7fcdeb072400da3f342ba329e9",
    "integrity": "sha512-zlOQ80VrQ2Ue+ymH5OuM/DlDq64mEm+B9UTdHULv5osUMD6HalNTblf2b1u/m6QecjsnOkBpqVZ+XPwIVsy7Ng==",
    "registry": "npm",
    "packageName": "case-anything",
    "cacheIntegrity": "sha512-zlOQ80VrQ2Ue+ymH5OuM/DlDq64mEm+B9UTdHULv5osUMD6HalNTblf2b1u/m6QecjsnOkBpqVZ+XPwIVsy7Ng== sha1-DNwWJ4yymn/N6wckANo/NCujKek="
  },
  "registry": "npm",
  "hash": "0cdc16278cb29a7fcdeb072400da3f342ba329e9"
}