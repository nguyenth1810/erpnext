{
  "manifest": {
    "name": "@vitejs/plugin-vue",
    "version": "4.4.0",
    "license": "MIT",
    "author": {
      "name": "Evan You"
    },
    "files": [
      "dist"
    ],
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "exports": {
      ".": {
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      }
    },
    "engines": {
      "node": "^14.18.0 || >=16.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/vitejs/vite-plugin-vue.git",
      "directory": "packages/plugin-vue"
    },
    "bugs": {
      "url": "https://github.com/vitejs/vite-plugin-vue/issues"
    },
    "homepage": "https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#readme",
    "peerDependencies": {
      "vite": "^4.0.0",
      "vue": "^3.2.25"
    },
    "devDependencies": {
      "@jridgewell/gen-mapping": "^0.3.3",
      "@jridgewell/trace-mapping": "^0.3.19",
      "debug": "^4.3.4",
      "rollup": "^3.17.2",
      "slash": "^5.1.0",
      "source-map-js": "^1.0.2",
      "vite": "^4.4.9",
      "vue": "^3.3.4"
    },
    "scripts": {
      "dev": "unbuild --stub",
      "build": "unbuild && pnpm run patch-cjs",
      "patch-cjs": "tsx ../../scripts/patchCJS.ts"
    },
    "_registry": "npm",
    "_loc": "/home/erp/.cache/yarn/v6/npm-@vitejs-plugin-vue-4.4.0-8ae96573236cdb12de6850a6d929b5537ec85390-integrity/node_modules/@vitejs/plugin-vue/package.json",
    "readmeFilename": "README.md",
    "readme": "# @vitejs/plugin-vue [![npm](https://img.shields.io/npm/v/@vitejs/plugin-vue.svg)](https://npmjs.com/package/@vitejs/plugin-vue)\n\n> Note: as of `vue` 3.2.13+ and `@vitejs/plugin-vue` 1.9.0+, `@vue/compiler-sfc` is no longer required as a peer dependency.\n\n```js\n// vite.config.js\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [vue()],\n}\n```\n\nFor JSX / TSX support, [`@vitejs/plugin-vue-jsx`](https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue-jsx) is also needed.\n\n## Options\n\n```ts\nexport interface Options {\n  include?: string | RegExp | (string | RegExp)[]\n  exclude?: string | RegExp | (string | RegExp)[]\n\n  isProduction?: boolean\n\n  // options to pass on to vue/compiler-sfc\n  script?: Partial<\n    Pick<\n      SFCScriptCompileOptions,\n      | 'babelParserPlugins'\n      | 'globalTypeFiles'\n      | 'defineModel'\n      | 'propsDestructure'\n      | 'fs'\n      | 'reactivityTransform'\n    >\n  >\n\n  template?: Partial<\n    Pick<\n      SFCTemplateCompileOptions,\n      | 'compiler'\n      | 'compilerOptions'\n      | 'preprocessOptions'\n      | 'preprocessCustomRequire'\n      | 'transformAssetUrls'\n    >\n  >\n  style?: Partial<Pick<SFCStyleCompileOptions, 'trim'>>\n\n  /**\n   * Transform Vue SFCs into custom elements.\n   * - `true`: all `*.vue` imports are converted into custom elements\n   * - `string | RegExp`: matched files are converted into custom elements\n   *\n   * @default /\\.ce\\.vue$/\n   */\n  customElement?: boolean | string | RegExp | (string | RegExp)[]\n\n  /**\n   * Enable Vue reactivity transform (experimental).\n   * https://vuejs.org/guide/extras/reactivity-transform.html\n   * - `true`: transform will be enabled for all vue,js(x),ts(x) files except\n   *           those inside node_modules\n   * - `string | RegExp`: apply to vue + only matched files (will include\n   *                      node_modules, so specify directories if necessary)\n   * - `false`: disable in all cases\n   *\n   * @default false\n   */\n  reactivityTransform?: boolean | string | RegExp | (string | RegExp)[]\n\n  /**\n   * Use custom compiler-sfc instance. Can be used to force a specific version.\n   */\n  compiler?: typeof _compiler\n}\n```\n\n## Asset URL handling\n\nWhen `@vitejs/plugin-vue` compiles the `<template>` blocks in SFCs, it also converts any encountered asset URLs into ESM imports.\n\nFor example, the following template snippet:\n\n```vue\n<img src=\"../image.png\" />\n```\n\nIs the same as:\n\n```vue\n<script setup>\nimport _imports_0 from '../image.png'\n</script>\n\n<img :src=\"_imports_0\" />\n```\n\nBy default the following tag/attribute combinations are transformed, and can be configured using the `template.transformAssetUrls` option.\n\n```js\n{\n  video: ['src', 'poster'],\n  source: ['src'],\n  img: ['src'],\n  image: ['xlink:href', 'href'],\n  use: ['xlink:href', 'href']\n}\n```\n\nNote that only attribute values that are static strings are transformed. Otherwise, you'd need to import the asset manually, e.g. `import imgUrl from '../image.png'`.\n\n## Example for passing options to `vue/compiler-sfc`:\n\n```ts\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          // ...\n        },\n        transformAssetUrls: {\n          // ...\n        },\n      },\n    }),\n  ],\n}\n```\n\n## Example for transforming custom blocks\n\n```ts\nimport vue from '@vitejs/plugin-vue'\nimport yaml from 'js-yaml'\n\nconst vueI18nPlugin = {\n  name: 'vue-i18n',\n  transform(code, id) {\n    // if .vue file don't have <i18n> block, just return\n    if (!/vue&type=i18n/.test(id)) {\n      return\n    }\n    // parse yaml\n    if (/\\.ya?ml$/.test(id)) {\n      code = JSON.stringify(yaml.load(code.trim()))\n    }\n    // mount the value on the i18n property of the component instance\n    return `export default Comp => {\n      Comp.i18n = ${code}\n    }`\n  },\n}\n\nexport default {\n  plugins: [vue(), vueI18nPlugin],\n}\n```\n\nCreate a file named `Demo.vue`, add `lang=\"yaml\"` to the `<i18n>` blocks, then you can use the syntax of `YAML`:\n\n```vue\n<template>Hello</template>\n\n<i18n lang=\"yaml\">\nmessage: 'world'\nfullWord: 'hello world'\n</i18n>\n```\n\n`message` is mounted on the i18n property of the component instance, you can use like this:\n\n```vue\n<script setup lang=\"ts\">\nimport Demo from 'components/Demo.vue'\n</script>\n\n<template>\n  <Demo /> {{ Demo.i18n.message }}\n  <div>{{ Demo.i18n.fullWord }}</div>\n</template>\n```\n\n## Using Vue SFCs as Custom Elements\n\n> Requires `vue@^3.2.0` & `@vitejs/plugin-vue@^1.4.0`\n\nVue 3.2 introduces the `defineCustomElement` method, which works with SFCs. By default, `<style>` tags inside SFCs are extracted and merged into CSS files during build. However when shipping a library of custom elements, it may be desirable to inline the styles as JavaScript strings and inject them into the custom elements' shadow root instead.\n\nStarting in 1.4.0, files ending with `*.ce.vue` will be compiled in \"custom elements\" mode: its `<style>` tags are compiled into inlined CSS strings and attached to the component as its `styles` property:\n\n```js\nimport { defineCustomElement } from 'vue'\nimport Example from './Example.ce.vue'\n\nconsole.log(Example.styles) // ['/* css content */']\n\n// register\ncustomElements.define('my-example', defineCustomElement(Example))\n```\n\nNote in custom elements mode there is no need to use `<style scoped>` since the CSS is already scoped inside the shadow DOM.\n\nThe `customElement` plugin option can be used to configure the behavior:\n\n- `{ customElement: true }` will import all `*.vue` files in custom element mode.\n- Use a string or regex pattern to change how files should be loaded as Custom Elements (this check is applied after `include` and `exclude` matches).\n\n## License\n\nMIT\n",
    "description": "> Note: as of `vue` 3.2.13+ and `@vitejs/plugin-vue` 1.9.0+, `@vue/compiler-sfc` is no longer required as a peer dependency.",
    "licenseText": "MIT License\n\nCopyright (c) 2019-present, Yuxi (Evan) You and Vite contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@vitejs/plugin-vue/-/plugin-vue-4.4.0.tgz#8ae96573236cdb12de6850a6d929b5537ec85390",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@vitejs/plugin-vue/-/plugin-vue-4.4.0.tgz",
    "hash": "8ae96573236cdb12de6850a6d929b5537ec85390",
    "integrity": "sha512-xdguqb+VUwiRpSg+nsc2HtbAUSGak25DXYvpQQi4RVU1Xq1uworyoH/md9Rfd8zMmPR/pSghr309QNcftUVseg==",
    "registry": "npm",
    "packageName": "@vitejs/plugin-vue",
    "cacheIntegrity": "sha512-xdguqb+VUwiRpSg+nsc2HtbAUSGak25DXYvpQQi4RVU1Xq1uworyoH/md9Rfd8zMmPR/pSghr309QNcftUVseg== sha1-iullcyNs2xLeaFCm2Sm1U37IU5A="
  },
  "registry": "npm",
  "hash": "8ae96573236cdb12de6850a6d929b5537ec85390"
}