{
 "add_total_row": 1,
 "columns": [],
 "creation": "2023-10-13 11:48:21.563446",
 "disable_prepared_report": 0,
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [],
 "idx": 0,
 "is_standard": "Yes",
 "modified": "2023-10-13 14:41:14.159580",
 "modified_by": "Administrator",
 "module": "Education",
 "name": "Ti\u1ebft d\u1ea1y",
 "owner": "Administrator",
 "prepared_report": 0,
 "query": "SELECT\r\n  instructor_name, schedule_date, from_time, to_time, custom_course_count\r\nFROM\r\n  `tabCourse Schedule`",
 "ref_doctype": "Course Schedule",
 "report_name": "Ti\u1ebft d\u1ea1y",
 "report_script": "# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\r\n# License: GNU General Public License v3. See license.txt\r\n\r\n\r\n    from calendar import monthrange\r\n    from itertools import groupby\r\n    from typing import Dict, List, Optional, Tuple\r\n\r\nimport frappe\r\nfrom frappe import _\r\nfrom frappe.query_builder.functions import Count, Extract, Sum\r\nfrom frappe.utils import cint, cstr, getdate\r\n\r\nFilters = frappe._dict\r\n\r\nstatus_map = {\r\n\t\"Present\": \"P\",\r\n\t\"Absent\": \"A\",\r\n\t\"Half Day\": \"HD\",\r\n\t\"Work From Home\": \"WFH\",\r\n\t\"On Leave\": \"L\",\r\n\t\"Holiday\": \"H\",\r\n\t\"Weekly Off\": \"WO\",\r\n}\r\n\r\nday_abbr = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\r\n\r\n\r\ndef execute(filters: Optional[Filters] = None) -> Tuple:\r\n\tfilters = frappe._dict(filters or {})\r\n\r\n\tif not (filters.month and filters.year):\r\n\t\tfrappe.throw(_(\"Please select month and year.\"))\r\n\r\n\tattendance_map = get_attendance_map(filters)\r\n\tif not attendance_map:\r\n\t\tfrappe.msgprint(_(\"No attendance records found.\"), alert=True, indicator=\"orange\")\r\n\t\treturn [], [], None, None\r\n\r\n\tcolumns = get_columns(filters)\r\n\tdata = get_data(filters, attendance_map)\r\n\r\n\tif not data:\r\n\t\tfrappe.msgprint(\r\n\t\t\t_(\"No attendance records found for this criteria.\"), alert=True, indicator=\"orange\"\r\n\t\t)\r\n\t\treturn columns, [], None, None\r\n\r\n\tmessage = get_message() if not filters.summarized_view else \"\"\r\n\tchart = get_chart_data(attendance_map, filters)\r\n\r\n\treturn columns, data, message, chart\r\n\r\n\r\ndef get_message() -> str:\r\n\tmessage = \"\"\r\n\tcolors = [\"green\", \"red\", \"orange\", \"green\", \"#318AD8\", \"\", \"\"]\r\n\r\n\tcount = 0\r\n\tfor status, abbr in status_map.items():\r\n\t\tmessage += f\"\"\"\r\n\t\t\t<span style='border-left: 2px solid {colors[count]}; padding-right: 12px; padding-left: 5px; margin-right: 3px;'>\r\n\t\t\t\t{status} - {abbr}\r\n\t\t\t</span>\r\n\t\t\"\"\"\r\n\t\tcount += 1\r\n\r\n\treturn message\r\n\r\n\r\ndef get_columns(filters: Filters) -> List[Dict]:\r\n\tcolumns = []\r\n\r\n\tif filters.group_by:\r\n\t\tcolumns.append(\r\n\t\t\t{\r\n\t\t\t\t\"label\": _(filters.group_by),\r\n\t\t\t\t\"fieldname\": frappe.scrub(filters.group_by),\r\n\t\t\t\t\"fieldtype\": \"Link\",\r\n\t\t\t\t\"options\": \"Branch\",\r\n\t\t\t\t\"width\": 120,\r\n\t\t\t}\r\n\t\t)\r\n\r\n\tcolumns.extend(\r\n\t\t[\r\n\t\t\t{\r\n\t\t\t\t\"label\": _(\"Employee\"),\r\n\t\t\t\t\"fieldname\": \"employee\",\r\n\t\t\t\t\"fieldtype\": \"Link\",\r\n\t\t\t\t\"options\": \"Employee\",\r\n\t\t\t\t\"width\": 135,\r\n\t\t\t},\r\n\t\t\t{\"label\": _(\"Employee Name\"), \"fieldname\": \"employee_name\", \"fieldtype\": \"Data\", \"width\": 120},\r\n\t\t]\r\n\t)\r\n\r\n\tif filters.summarized_view:\r\n\t\tcolumns.extend(\r\n\t\t\t[\r\n\t\t\t\t{\r\n\t\t\t\t\t\"label\": _(\"Total Present\"),\r\n\t\t\t\t\t\"fieldname\": \"total_present\",\r\n\t\t\t\t\t\"fieldtype\": \"Float\",\r\n\t\t\t\t\t\"width\": 110,\r\n\t\t\t\t},\r\n\t\t\t\t{\"label\": _(\"Total Leaves\"), \"fieldname\": \"total_leaves\", \"fieldtype\": \"Float\", \"width\": 110},\r\n\t\t\t\t{\"label\": _(\"Total Absent\"), \"fieldname\": \"total_absent\", \"fieldtype\": \"Float\", \"width\": 110},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"label\": _(\"Total Holidays\"),\r\n\t\t\t\t\t\"fieldname\": \"total_holidays\",\r\n\t\t\t\t\t\"fieldtype\": \"Float\",\r\n\t\t\t\t\t\"width\": 120,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"label\": _(\"Unmarked Days\"),\r\n\t\t\t\t\t\"fieldname\": \"unmarked_days\",\r\n\t\t\t\t\t\"fieldtype\": \"Float\",\r\n\t\t\t\t\t\"width\": 130,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t)\r\n\t\tcolumns.extend(get_columns_for_leave_types())\r\n\t\tcolumns.extend(\r\n\t\t\t[\r\n\t\t\t\t{\r\n\t\t\t\t\t\"label\": _(\"Total Late Entries\"),\r\n\t\t\t\t\t\"fieldname\": \"total_late_entries\",\r\n\t\t\t\t\t\"fieldtype\": \"Float\",\r\n\t\t\t\t\t\"width\": 140,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"label\": _(\"Total Early Exits\"),\r\n\t\t\t\t\t\"fieldname\": \"total_early_exits\",\r\n\t\t\t\t\t\"fieldtype\": \"Float\",\r\n\t\t\t\t\t\"width\": 140,\r\n\t\t\t\t},\r\n\t\t\t]\r\n\t\t)\r\n\telse:\r\n\t\tcolumns.append({\"label\": _(\"Shift\"), \"fieldname\": \"shift\", \"fieldtype\": \"Data\", \"width\": 120})\r\n\t\tcolumns.extend(get_columns_for_days(filters))\r\n\r\n\treturn columns\r\n\r\n\r\ndef get_columns_for_leave_types() -> List[Dict]:\r\n\tleave_types = frappe.db.get_all(\"Leave Type\", pluck=\"name\")\r\n\ttypes = []\r\n\tfor entry in leave_types:\r\n\t\ttypes.append(\r\n\t\t\t{\"label\": entry, \"fieldname\": frappe.scrub(entry), \"fieldtype\": \"Float\", \"width\": 120}\r\n\t\t)\r\n\r\n\treturn types\r\n\r\n\r\ndef get_columns_for_days(filters: Filters) -> List[Dict]:\r\n\ttotal_days = get_total_days_in_month(filters)\r\n\tdays = []\r\n\r\n\tfor day in range(1, total_days + 1):\r\n\t\t# forms the dates from selected year and month from filters\r\n\t\tdate = \"{}-{}-{}\".format(cstr(filters.year), cstr(filters.month), cstr(day))\r\n\t\t# gets abbr from weekday number\r\n\t\tweekday = day_abbr[getdate(date).weekday()]\r\n\t\t# sets days as 1 Mon, 2 Tue, 3 Wed\r\n\t\tlabel = \"{} {}\".format(cstr(day), weekday)\r\n\t\tdays.append({\"label\": label, \"fieldtype\": \"Data\", \"fieldname\": day, \"width\": 65})\r\n\r\n\treturn days\r\n\r\n\r\ndef get_total_days_in_month(filters: Filters) -> int:\r\n\treturn monthrange(cint(filters.year), cint(filters.month))[1]\r\n\r\n\r\ndef get_data(filters: Filters, attendance_map: Dict) -> List[Dict]:\r\n\temployee_details, group_by_param_values = get_employee_related_details(filters)\r\n\tholiday_map = get_holiday_map(filters)\r\n\tdata = []\r\n\r\n\tif filters.group_by:\r\n\t\tgroup_by_column = frappe.scrub(filters.group_by)\r\n\r\n\t\tfor value in group_by_param_values:\r\n\t\t\tif not value:\r\n\t\t\t\tcontinue\r\n\r\n\t\t\trecords = get_rows(employee_details[value], filters, holiday_map, attendance_map)\r\n\r\n\t\t\tif records:\r\n\t\t\t\tdata.append({group_by_column: frappe.bold(value)})\r\n\t\t\t\tdata.extend(records)\r\n\telse:\r\n\t\tdata = get_rows(employee_details, filters, holiday_map, attendance_map)\r\n\r\n\treturn data\r\n\r\n\r\ndef get_attendance_map(filters: Filters) -> Dict:\r\n\t\"\"\"Returns a dictionary of employee wise attendance map as per shifts for all the days of the month like\r\n\t{\r\n\t    'employee1': {\r\n\t            'Morning Shift': {1: 'Present', 2: 'Absent', ...}\r\n\t            'Evening Shift': {1: 'Absent', 2: 'Present', ...}\r\n\t    },\r\n\t    'employee2': {\r\n\t            'Afternoon Shift': {1: 'Present', 2: 'Absent', ...}\r\n\t            'Night Shift': {1: 'Absent', 2: 'Absent', ...}\r\n\t    },\r\n\t    'employee3': {\r\n\t            None: {1: 'On Leave'}\r\n\t    }\r\n\t}\r\n\t\"\"\"\r\n\tattendance_list = get_attendance_records(filters)\r\n\tattendance_map = {}\r\n\tleave_map = {}\r\n\r\n\tfor d in attendance_list:\r\n\t\tif d.status == \"On Leave\":\r\n\t\t\tleave_map.setdefault(d.employee, []).append(d.day_of_month)\r\n\t\t\tcontinue\r\n\r\n\t\tattendance_map.setdefault(d.employee, {}).setdefault(d.shift, {})\r\n\t\tattendance_map[d.employee][d.shift][d.day_of_month] = d.status\r\n\r\n\t# leave is applicable for the entire day so all shifts should show the leave entry\r\n\tfor employee, leave_days in leave_map.items():\r\n\t\t# no attendance records exist except leaves\r\n\t\tif employee not in attendance_map:\r\n\t\t\tattendance_map.setdefault(employee, {}).setdefault(None, {})\r\n\r\n\t\tfor day in leave_days:\r\n\t\t\tfor shift in attendance_map[employee].keys():\r\n\t\t\t\tattendance_map[employee][shift][day] = \"On Leave\"\r\n\r\n\treturn attendance_map\r\n\r\n\r\ndef get_attendance_records(filters: Filters) -> List[Dict]:\r\n\tAttendance = frappe.qb.DocType(\"Attendance\")\r\n\tquery = (\r\n\t\tfrappe.qb.from_(Attendance)\r\n\t\t.select(\r\n\t\t\tAttendance.employee,\r\n\t\t\tExtract(\"day\", Attendance.attendance_date).as_(\"day_of_month\"),\r\n\t\t\tAttendance.status,\r\n\t\t\tAttendance.shift,\r\n\t\t)\r\n\t\t.where(\r\n\t\t\t(Attendance.docstatus == 1)\r\n\t\t\t& (Attendance.company == filters.company)\r\n\t\t\t& (Extract(\"month\", Attendance.attendance_date) == filters.month)\r\n\t\t\t& (Extract(\"year\", Attendance.attendance_date) == filters.year)\r\n\t\t)\r\n\t)\r\n\r\n\tif filters.employee:\r\n\t\tquery = query.where(Attendance.employee == filters.employee)\r\n\tquery = query.orderby(Attendance.employee, Attendance.attendance_date)\r\n\r\n\treturn query.run(as_dict=1)\r\n\r\n\r\ndef get_employee_related_details(filters: Filters) -> Tuple[Dict, List]:\r\n\t\"\"\"Returns\r\n\t1. nested dict for employee details\r\n\t2. list of values for the group by filter\r\n\t\"\"\"\r\n\tEmployee = frappe.qb.DocType(\"Employee\")\r\n\tquery = (\r\n\t\tfrappe.qb.from_(Employee)\r\n\t\t.select(\r\n\t\t\tEmployee.name,\r\n\t\t\tEmployee.employee_name,\r\n\t\t\tEmployee.designation,\r\n\t\t\tEmployee.grade,\r\n\t\t\tEmployee.department,\r\n\t\t\tEmployee.branch,\r\n\t\t\tEmployee.company,\r\n\t\t\tEmployee.holiday_list,\r\n\t\t)\r\n\t\t.where(Employee.company == filters.company)\r\n\t)\r\n\r\n\tif filters.employee:\r\n\t\tquery = query.where(Employee.name == filters.employee)\r\n\r\n\tgroup_by = filters.group_by\r\n\tif group_by:\r\n\t\tgroup_by = group_by.lower()\r\n\t\tquery = query.orderby(group_by)\r\n\r\n\temployee_details = query.run(as_dict=True)\r\n\r\n\tgroup_by_param_values = []\r\n\temp_map = {}\r\n\r\n\tif group_by:\r\n\t\tfor parameter, employees in groupby(employee_details, key=lambda d: d[group_by]):\r\n\t\t\tgroup_by_param_values.append(parameter)\r\n\t\t\temp_map.setdefault(parameter, frappe._dict())\r\n\r\n\t\t\tfor emp in employees:\r\n\t\t\t\temp_map[parameter][emp.name] = emp\r\n\telse:\r\n\t\tfor emp in employee_details:\r\n\t\t\temp_map[emp.name] = emp\r\n\r\n\treturn emp_map, group_by_param_values\r\n\r\n\r\ndef get_holiday_map(filters: Filters) -> Dict[str, List[Dict]]:\r\n\t\"\"\"\r\n\tReturns a dict of holidays falling in the filter month and year\r\n\twith list name as key and list of holidays as values like\r\n\t{\r\n\t        'Holiday List 1': [\r\n\t                {'day_of_month': '0' , 'weekly_off': 1},\r\n\t                {'day_of_month': '1', 'weekly_off': 0}\r\n\t        ],\r\n\t        'Holiday List 2': [\r\n\t                {'day_of_month': '0' , 'weekly_off': 1},\r\n\t                {'day_of_month': '1', 'weekly_off': 0}\r\n\t        ]\r\n\t}\r\n\t\"\"\"\r\n\t# add default holiday list too\r\n\tholiday_lists = frappe.db.get_all(\"Holiday List\", pluck=\"name\")\r\n\tdefault_holiday_list = frappe.get_cached_value(\"Company\", filters.company, \"default_holiday_list\")\r\n\tholiday_lists.append(default_holiday_list)\r\n\r\n\tholiday_map = frappe._dict()\r\n\tHoliday = frappe.qb.DocType(\"Holiday\")\r\n\r\n\tfor d in holiday_lists:\r\n\t\tif not d:\r\n\t\t\tcontinue\r\n\r\n\t\tholidays = (\r\n\t\t\tfrappe.qb.from_(Holiday)\r\n\t\t\t.select(Extract(\"day\", Holiday.holiday_date).as_(\"day_of_month\"), Holiday.weekly_off)\r\n\t\t\t.where(\r\n\t\t\t\t(Holiday.parent == d)\r\n\t\t\t\t& (Extract(\"month\", Holiday.holiday_date) == filters.month)\r\n\t\t\t\t& (Extract(\"year\", Holiday.holiday_date) == filters.year)\r\n\t\t\t)\r\n\t\t).run(as_dict=True)\r\n\r\n\t\tholiday_map.setdefault(d, holidays)\r\n\r\n\treturn holiday_map\r\n\r\n\r\ndef get_rows(\r\n\temployee_details: Dict, filters: Filters, holiday_map: Dict, attendance_map: Dict\r\n) -> List[Dict]:\r\n\trecords = []\r\n\tdefault_holiday_list = frappe.get_cached_value(\"Company\", filters.company, \"default_holiday_list\")\r\n\r\n\tfor employee, details in employee_details.items():\r\n\t\temp_holiday_list = details.holiday_list or default_holiday_list\r\n\t\tholidays = holiday_map.get(emp_holiday_list)\r\n\r\n\t\tif filters.summarized_view:\r\n\t\t\tattendance = get_attendance_status_for_summarized_view(employee, filters, holidays)\r\n\t\t\tif not attendance:\r\n\t\t\t\tcontinue\r\n\r\n\t\t\tleave_summary = get_leave_summary(employee, filters)\r\n\t\t\tentry_exits_summary = get_entry_exits_summary(employee, filters)\r\n\r\n\t\t\trow = {\"employee\": employee, \"employee_name\": details.employee_name}\r\n\t\t\tset_defaults_for_summarized_view(filters, row)\r\n\t\t\trow.update(attendance)\r\n\t\t\trow.update(leave_summary)\r\n\t\t\trow.update(entry_exits_summary)\r\n\r\n\t\t\trecords.append(row)\r\n\t\telse:\r\n\t\t\temployee_attendance = attendance_map.get(employee)\r\n\t\t\tif not employee_attendance:\r\n\t\t\t\tcontinue\r\n\r\n\t\t\tattendance_for_employee = get_attendance_status_for_detailed_view(\r\n\t\t\t\temployee, filters, employee_attendance, holidays\r\n\t\t\t)\r\n\t\t\t# set employee details in the first row\r\n\t\t\tattendance_for_employee[0].update(\r\n\t\t\t\t{\"employee\": employee, \"employee_name\": details.employee_name}\r\n\t\t\t)\r\n\r\n\t\t\trecords.extend(attendance_for_employee)\r\n\r\n\treturn records\r\n\r\n\r\ndef set_defaults_for_summarized_view(filters, row):\r\n\tfor entry in get_columns(filters):\r\n\t\tif entry.get(\"fieldtype\") == \"Float\":\r\n\t\t\trow[entry.get(\"fieldname\")] = 0.0\r\n\r\n\r\ndef get_attendance_status_for_summarized_view(\r\n\temployee: str, filters: Filters, holidays: List\r\n) -> Dict:\r\n\t\"\"\"Returns dict of attendance status for employee like\r\n\t{'total_present': 1.5, 'total_leaves': 0.5, 'total_absent': 13.5, 'total_holidays': 8, 'unmarked_days': 5}\r\n\t\"\"\"\r\n\tsummary, attendance_days = get_attendance_summary_and_days(employee, filters)\r\n\tif not any(summary.values()):\r\n\t\treturn {}\r\n\r\n\ttotal_days = get_total_days_in_month(filters)\r\n\ttotal_holidays = total_unmarked_days = 0\r\n\r\n\tfor day in range(1, total_days + 1):\r\n\t\tif day in attendance_days:\r\n\t\t\tcontinue\r\n\r\n\t\tstatus = get_holiday_status(day, holidays)\r\n\t\tif status in [\"Weekly Off\", \"Holiday\"]:\r\n\t\t\ttotal_holidays += 1\r\n\t\telif not status:\r\n\t\t\ttotal_unmarked_days += 1\r\n\r\n\treturn {\r\n\t\t\"total_present\": summary.total_present + summary.total_half_days,\r\n\t\t\"total_leaves\": summary.total_leaves + summary.total_half_days,\r\n\t\t\"total_absent\": summary.total_absent,\r\n\t\t\"total_holidays\": total_holidays,\r\n\t\t\"unmarked_days\": total_unmarked_days,\r\n\t}\r\n\r\n\r\ndef get_attendance_summary_and_days(employee: str, filters: Filters) -> Tuple[Dict, List]:\r\n\tAttendance = frappe.qb.DocType(\"Attendance\")\r\n\r\n\tpresent_case = (\r\n\t\tfrappe.qb.terms.Case()\r\n\t\t.when(((Attendance.status == \"Present\") | (Attendance.status == \"Work From Home\")), 1)\r\n\t\t.else_(0)\r\n\t)\r\n\tsum_present = Sum(present_case).as_(\"total_present\")\r\n\r\n\tabsent_case = frappe.qb.terms.Case().when(Attendance.status == \"Absent\", 1).else_(0)\r\n\tsum_absent = Sum(absent_case).as_(\"total_absent\")\r\n\r\n\tleave_case = frappe.qb.terms.Case().when(Attendance.status == \"On Leave\", 1).else_(0)\r\n\tsum_leave = Sum(leave_case).as_(\"total_leaves\")\r\n\r\n\thalf_day_case = frappe.qb.terms.Case().when(Attendance.status == \"Half Day\", 0.5).else_(0)\r\n\tsum_half_day = Sum(half_day_case).as_(\"total_half_days\")\r\n\r\n\tsummary = (\r\n\t\tfrappe.qb.from_(Attendance)\r\n\t\t.select(\r\n\t\t\tsum_present,\r\n\t\t\tsum_absent,\r\n\t\t\tsum_leave,\r\n\t\t\tsum_half_day,\r\n\t\t)\r\n\t\t.where(\r\n\t\t\t(Attendance.docstatus == 1)\r\n\t\t\t& (Attendance.employee == employee)\r\n\t\t\t& (Attendance.company == filters.company)\r\n\t\t\t& (Extract(\"month\", Attendance.attendance_date) == filters.month)\r\n\t\t\t& (Extract(\"year\", Attendance.attendance_date) == filters.year)\r\n\t\t)\r\n\t).run(as_dict=True)\r\n\r\n\tdays = (\r\n\t\tfrappe.qb.from_(Attendance)\r\n\t\t.select(Extract(\"day\", Attendance.attendance_date).as_(\"day_of_month\"))\r\n\t\t.distinct()\r\n\t\t.where(\r\n\t\t\t(Attendance.docstatus == 1)\r\n\t\t\t& (Attendance.employee == employee)\r\n\t\t\t& (Attendance.company == filters.company)\r\n\t\t\t& (Extract(\"month\", Attendance.attendance_date) == filters.month)\r\n\t\t\t& (Extract(\"year\", Attendance.attendance_date) == filters.year)\r\n\t\t)\r\n\t).run(pluck=True)\r\n\r\n\treturn summary[0], days\r\n\r\n\r\ndef get_attendance_status_for_detailed_view(\r\n\temployee: str, filters: Filters, employee_attendance: Dict, holidays: List\r\n) -> List[Dict]:\r\n\t\"\"\"Returns list of shift-wise attendance status for employee\r\n\t[\r\n\t        {'shift': 'Morning Shift', 1: 'A', 2: 'P', 3: 'A'....},\r\n\t        {'shift': 'Evening Shift', 1: 'P', 2: 'A', 3: 'P'....}\r\n\t]\r\n\t\"\"\"\r\n\ttotal_days = get_total_days_in_month(filters)\r\n\tattendance_values = []\r\n\r\n\tfor shift, status_dict in employee_attendance.items():\r\n\t\trow = {\"shift\": shift}\r\n\r\n\t\tfor day in range(1, total_days + 1):\r\n\t\t\tstatus = status_dict.get(day)\r\n\t\t\tif status is None and holidays:\r\n\t\t\t\tstatus = get_holiday_status(day, holidays)\r\n\r\n\t\t\tabbr = status_map.get(status, \"\")\r\n\t\t\trow[day] = abbr\r\n\r\n\t\tattendance_values.append(row)\r\n\r\n\treturn attendance_values\r\n\r\n\r\ndef get_holiday_status(day: int, holidays: List) -> str:\r\n\tstatus = None\r\n\tif holidays:\r\n\t\tfor holiday in holidays:\r\n\t\t\tif day == holiday.get(\"day_of_month\"):\r\n\t\t\t\tif holiday.get(\"weekly_off\"):\r\n\t\t\t\t\tstatus = \"Weekly Off\"\r\n\t\t\t\telse:\r\n\t\t\t\t\tstatus = \"Holiday\"\r\n\t\t\t\tbreak\r\n\treturn status\r\n\r\n\r\ndef get_leave_summary(employee: str, filters: Filters) -> Dict[str, float]:\r\n\t\"\"\"Returns a dict of leave type and corresponding leaves taken by employee like:\r\n\t{'leave_without_pay': 1.0, 'sick_leave': 2.0}\r\n\t\"\"\"\r\n\tAttendance = frappe.qb.DocType(\"Attendance\")\r\n\tday_case = frappe.qb.terms.Case().when(Attendance.status == \"Half Day\", 0.5).else_(1)\r\n\tsum_leave_days = Sum(day_case).as_(\"leave_days\")\r\n\r\n\tleave_details = (\r\n\t\tfrappe.qb.from_(Attendance)\r\n\t\t.select(Attendance.leave_type, sum_leave_days)\r\n\t\t.where(\r\n\t\t\t(Attendance.employee == employee)\r\n\t\t\t& (Attendance.docstatus == 1)\r\n\t\t\t& (Attendance.company == filters.company)\r\n\t\t\t& ((Attendance.leave_type.isnotnull()) | (Attendance.leave_type != \"\"))\r\n\t\t\t& (Extract(\"month\", Attendance.attendance_date) == filters.month)\r\n\t\t\t& (Extract(\"year\", Attendance.attendance_date) == filters.year)\r\n\t\t)\r\n\t\t.groupby(Attendance.leave_type)\r\n\t).run(as_dict=True)\r\n\r\n\tleaves = {}\r\n\tfor d in leave_details:\r\n\t\tleave_type = frappe.scrub(d.leave_type)\r\n\t\tleaves[leave_type] = d.leave_days\r\n\r\n\treturn leaves\r\n\r\n\r\ndef get_entry_exits_summary(employee: str, filters: Filters) -> Dict[str, float]:\r\n\t\"\"\"Returns total late entries and total early exits for employee like:\r\n\t{'total_late_entries': 5, 'total_early_exits': 2}\r\n\t\"\"\"\r\n\tAttendance = frappe.qb.DocType(\"Attendance\")\r\n\r\n\tlate_entry_case = frappe.qb.terms.Case().when(Attendance.late_entry == \"1\", \"1\")\r\n\tcount_late_entries = Count(late_entry_case).as_(\"total_late_entries\")\r\n\r\n\tearly_exit_case = frappe.qb.terms.Case().when(Attendance.early_exit == \"1\", \"1\")\r\n\tcount_early_exits = Count(early_exit_case).as_(\"total_early_exits\")\r\n\r\n\tentry_exits = (\r\n\t\tfrappe.qb.from_(Attendance)\r\n\t\t.select(count_late_entries, count_early_exits)\r\n\t\t.where(\r\n\t\t\t(Attendance.docstatus == 1)\r\n\t\t\t& (Attendance.employee == employee)\r\n\t\t\t& (Attendance.company == filters.company)\r\n\t\t\t& (Extract(\"month\", Attendance.attendance_date) == filters.month)\r\n\t\t\t& (Extract(\"year\", Attendance.attendance_date) == filters.year)\r\n\t\t)\r\n\t).run(as_dict=True)\r\n\r\n\treturn entry_exits[0]\r\n\r\n\r\n@frappe.whitelist()\r\ndef get_attendance_years() -> str:\r\n\t\"\"\"Returns all the years for which attendance records exist\"\"\"\r\n\tAttendance = frappe.qb.DocType(\"Attendance\")\r\n\tyear_list = (\r\n\t\tfrappe.qb.from_(Attendance)\r\n\t\t.select(Extract(\"year\", Attendance.attendance_date).as_(\"year\"))\r\n\t\t.distinct()\r\n\t).run(as_dict=True)\r\n\r\n\tif year_list:\r\n\t\tyear_list.sort(key=lambda d: d.year, reverse=True)\r\n\telse:\r\n\t\tyear_list = [frappe._dict({\"year\": getdate().year})]\r\n\r\n\treturn \"\\n\".join(cstr(entry.year) for entry in year_list)\r\n\r\n\r\ndef get_chart_data(attendance_map: Dict, filters: Filters) -> Dict:\r\n\tdays = get_columns_for_days(filters)\r\n\tlabels = []\r\n\tabsent = []\r\n\tpresent = []\r\n\tleave = []\r\n\r\n\tfor day in days:\r\n\t\tlabels.append(day[\"label\"])\r\n\t\ttotal_absent_on_day = total_leaves_on_day = total_present_on_day = 0\r\n\r\n\t\tfor employee, attendance_dict in attendance_map.items():\r\n\t\t\tfor shift, attendance in attendance_dict.items():\r\n\t\t\t\tattendance_on_day = attendance.get(day[\"fieldname\"])\r\n\r\n\t\t\t\tif attendance_on_day == \"On Leave\":\r\n\t\t\t\t\t# leave should be counted only once for the entire day\r\n\t\t\t\t\ttotal_leaves_on_day += 1\r\n\t\t\t\t\tbreak\r\n\t\t\t\telif attendance_on_day == \"Absent\":\r\n\t\t\t\t\ttotal_absent_on_day += 1\r\n\t\t\t\telif attendance_on_day in [\"Present\", \"Work From Home\"]:\r\n\t\t\t\t\ttotal_present_on_day += 1\r\n\t\t\t\telif attendance_on_day == \"Half Day\":\r\n\t\t\t\t\ttotal_present_on_day += 0.5\r\n\t\t\t\t\ttotal_leaves_on_day += 0.5\r\n\r\n\t\tabsent.append(total_absent_on_day)\r\n\t\tpresent.append(total_present_on_day)\r\n\t\tleave.append(total_leaves_on_day)\r\n\r\n\treturn {\r\n\t\t\"data\": {\r\n\t\t\t\"labels\": labels,\r\n\t\t\t\"datasets\": [\r\n\t\t\t\t{\"name\": \"Absent\", \"values\": absent},\r\n\t\t\t\t{\"name\": \"Present\", \"values\": present},\r\n\t\t\t\t{\"name\": \"Leave\", \"values\": leave},\r\n\t\t\t],\r\n\t\t},\r\n\t\t\"type\": \"line\",\r\n\t\t\"colors\": [\"red\", \"green\", \"blue\"],\r\n\t}\r\n",
 "report_type": "Script Report",
 "roles": []
}